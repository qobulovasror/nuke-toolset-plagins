#! /Applications/Nuke6.3v6/NukeX6.3v6.app/../Nuke6.3v6.app/Contents/MacOS/Nuke6.3v6 -nx
version 6.3 v6
Gizmo {
 inputs 0
 help "<b>TX_Disabler :</b>\nEnable and disable and predefined list of time consuming nodes.\nList can be created by hand or by selecting nodes by type.\n\nv1.0\n// by Tomas Lefebvre\nlefebvre.tomas@gmail.com"
 tile_color 0xff4c00ff
 addUserKnob {20 User l Settings}
 addUserKnob {22 set l "  set  " t "clic this to create the selection and set the the expression\nIf no node is selected, it will reset the list" T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\nwith root:\n    Nsel = nuke.selectedNodes()\n    myList = \[]\n    for n in Nsel:\n        myList.append(n.name())\n    myList =sorted(myList)\n\n    ##Store group\n    pk = pickle.dumps(myList)\n    cluster.setValue(pk)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in myList:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n\n    ##Set expression\n    for n in Nsel:\n        n\['disable'].setExpression('\$gui')\n\n" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 disEnTxt l "" +STARTLINE T "Use these two buttons to switch on and of the \"\$gui\" expression in the selection of nodes. Only select all the nodes once, the selection will be stored."}
 addUserKnob {22 disAll l "  disable in interactive  " t "add \$gui in the disable knob" T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\npk = pickle.loads(cluster.value())\n\nwith root:\n    Nall = nuke.allNodes()\n    allNames = \[]\n    for n in Nall:\n        allNames.append(n.name())\n    for n in pk :\n        if n not in list(set(pk) & set(allNames)):\n            pk.remove(n)\n\n\n    ##Remove expression\n    for n in pk:\n        nuke.toNode(n)\['disable'].setExpression('\$gui')\n\n    ##Store group\n    pk2 = pickle.dumps(pk)\n    cluster.setValue(pk2)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in pk:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n\n" +STARTLINE}
 addUserKnob {22 enAll l "  enable in interactive  " t "remove the \$gui expression in the disable node" -STARTLINE T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\npk = pickle.loads(cluster.value())\n\nwith root:\n    Nall = nuke.allNodes()\n    allNames = \[]\n    for n in Nall:\n        allNames.append(n.name())\n    for n in pk :\n        if n not in list(set(pk) & set(allNames)):\n            pk.remove(n)\n\n    ##Remove expression\n    for n in pk:\n        nuke.toNode(n)\['disable'].clearAnimated()\n        nuke.toNode(n)\['disable'].setValue(False)\n\n    ##Store group\n    pk2 = pickle.dumps(pk)\n    cluster.setValue(pk2)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in pk:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n"}
 addUserKnob {26 ""}
 addUserKnob {26 addRemTxt l "" +STARTLINE T "Use these buttons to add or remove nodes to the selection."}
 addUserKnob {22 addSel l "  add selected nodes  " t "add selected nodes to the selection" T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\nmyList = pickle.loads(cluster.value())\n\nwith root:\n    Nsel = nuke.selectedNodes()\n    myNewList = \[]\n    for n in Nsel:\n        myNewList.append(n.name())\n    intersection = list(set(myList) & set(myNewList))\n    for n in intersection:\n        myNewList.remove(n)\n    myNewList = myNewList + myList\n    myNewList = sorted(myNewList)\n\n\n    ##Store group\n    pk = pickle.dumps(myNewList)\n    cluster.setValue(pk)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in myNewList:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n\n\n" +STARTLINE}
 addUserKnob {22 remSel l "  remove selected nodes  " t "put selected nodes out of the selection" -STARTLINE T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\nstoredList = pickle.loads(cluster.value())\n\n\nwith root:\n    Nsel = nuke.selectedNodes()\n    myList = \[]\n    for n in Nsel :\n        myList.append(n.name())\n\n    for n in list(set(myList).difference(set(storedList))) :\n        myList.remove(n)\n\n    \n    myNewList = storedList\n    for n in myList:\n        myNewList.remove(n)\n    \n    myNewList = sorted(myNewList)\n\n\n    ##Store group\n    pk = pickle.dumps(myNewList)\n    cluster.setValue(pk)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in myNewList:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n\n\n"}
 addUserKnob {22 addType l "  add by type  " T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\n\ntypeDict = \{'Defocus' : 'Defocus' , 'DirBlurWrapper' : 'DirBlurWrapper' , 'FrameBlend' : 'FrameBlend' , 'FL_Depth_Of_Field' : 'OFXcom.frischluft.openfx.depthoffield_v1' , 'FL_Out_Of_Focus' : 'OFXcom.frischluft.openfx.outoffocus_v1' , 'RSMB_Vectors' : 'OFXcom.revisionfx.rsmb_vectors_v3', 'VectorBlur' : 'VectorBlur' \}\nmyType = typeDict\[thisNode\['type'].value()]\n\nmyList = pickle.loads(cluster.value())\n\n\n\nwith root:\n    Nsel = nuke.allNodes(myType)\n    myNewList = \[]\n    for n in Nsel:\n        myNewList.append(n.name())\n    \n    intersection = list(set(myList) & set(myNewList))\n    for n in intersection:\n        myNewList.remove(n)\n    myNewList = myNewList + myList\n    myNewList = sorted(myNewList)\n\n\n    ##Store group\n    pk = pickle.dumps(myNewList)\n    cluster.setValue(pk)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in myNewList:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n" +STARTLINE}
 addUserKnob {22 remType l "  remove by type  " -STARTLINE T "from __future__ import with_statement\nimport pickle\nroot = nuke.root()\nthisNode = nuke.thisNode()\ncluster = thisNode\['cluster']\nnodeList = thisNode\['nodesList']\n\n\ntypeDict = \{'Defocus' : 'Defocus' , 'DirBlur' : 'DirBlurWrapper' , 'FrameBlend' : 'FrameBlend' , 'FL_Depth_Of_Field' : 'OFXcom.frischluft.openfx.depthoffield_v1' , 'FL_Out_Of_Focus' : 'OFXcom.frischluft.openfx.outoffocus_v1' , 'RSMB_Vectors' : 'OFXcom.revisionfx.rsmb_vectors_v3', 'VectorBlur' : 'VectorBlur' \}\nmyType = typeDict\[thisNode\['type'].value()]\n\nstoredList = pickle.loads(cluster.value())\n\n\n\nwith root:\n    Nsel = nuke.allNodes(myType)\n    myList = \[]\n    for n in Nsel :\n        myList.append(n.name())\n\n    for n in list(set(myList).difference(set(storedList))) :\n        myList.remove(n)\n\n    \n    myNewList = storedList\n    for n in myList:\n        myNewList.remove(n)\n    \n    myNewList = sorted(myNewList)\n\n\n    ##Store group\n    pk = pickle.dumps(myNewList)\n    cluster.setValue(pk)\n\n    ##Store names\n    nodeList.setValue('')\n    for n in myNewList:\n        nodeList.setValue(nodeList.value() + n + '\\n' )\n\n\n"}
 addUserKnob {4 type l "  type" -STARTLINE M {Defocus DirBlurWrapper FrameBlend FL_Depth_Of_Field FL_Out_Of_Focus RSMB_Vectors VectorBlur "" "" ""}}
 addUserKnob {26 ""}
 addUserKnob {43 nodesList l "nodes list"}
 addUserKnob {1 cluster l INVISIBLE +INVISIBLE}
 cluster "(lp0\n."
 addUserKnob {26 credits l "Tomas   v1.0"}
}
 Output {
  inputs 0
  name Output1
  xpos 0
  ypos 300
 }
end_group
